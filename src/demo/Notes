1- YAML 

    1. Allez je génére mon yaml 
        k create ns demo-yaml && kubens demo-yaml
        k run example-service1 --image=soloio/example-service1:v0.2.2 --replicas=1 --port=8080 -o yaml --dry-run
        k run example-service2 --image=soloio/example-service2:v0.2.2 --replicas=1 --port=8080 -o yaml --dry-run
        k expose deployment example-service1 --port 80 --target-port 8080 --type ClusterIP -o yaml --dry-run
        k expose deployment example-service2 --port 80 --target-port 8080 --type ClusterIP -o yaml --dry-run

    2. Je valide mon yaml 
        kube-score ./*.yaml

    3. Je corrige mon yaml... Mais je ne sais plus ce que c'est l'imagePullPolicy... 
        k explain deploy.spec.template.spec.containers
        k explain deploy.spec.template.spec.containers.imagePullPolicy

    4. Bon ... Ok c'est corrigé... 
        cd ../yaml-ok
        cat ./deployment-1.yaml # On a  mis les 2 mêmes probes... 
        kube-score ./deployment-1.yaml


2- Helm 

    0. Pour aller plus vite le chart est déjà préparé vite fait donc on peut l'installer avec le setting par défaut. 
        helm install --name demo ./demo --namespace demo-helm

    2. Par contre je devais corriger la probe... 
        helm template . | kube-score -

    2. on aimerait bien que la readyness probe pointe sur /ping (pour s'assurer que tout fonctionne)
        helm template . -f values.yaml | kube-score -
        
    3. Nouvele version de l'appli (/ping) ...  et si on le mets direct en valeur par défaut ? 

        > On modifie le values par défaut et on joue les tests
        helm unittest .
        > Boom... Bon donc on le mets pas par défaut :)
        >>>> Deep dive sur les tests... 

    4. Du coup j'aimerai bien deploy mais comment je peux faire un diff ? 
        > Faire un fichier values, je change le path 
        helm diff upgrade demo ./demo -f values.yaml
        helm upgrade demo ./demo -f values.yaml

---> Résumé : On est partie de 2 images dockers, on a :
    - généré facilement du yaml (de qualité / scoré) 
    - généré un chart (helm create...)
    - généré des tests unitaire sur le chart
    - déployé en local et je suis capable de faire un diff entre mon values et ce qui tourne


3- On sort un peu de notre example afin de vous montrer 2/3 outils indispensable
        Immaginons que j'ai des nginx à déployer... 

        k create ns nginx
        kubens nginx

        k run nginx --image=nginx --replicas=3
        k expose deployment nginx --port 9999 --type LoadBalancer --target-port 80
        
        J'injecte du traffic 
            ruby tooling/get.rb
            kubetail nginx  ( kubectl logs -f -l ...)

        Je peux faire via un selecteur.. mais bon... relou
            tubectl +ng get pods
            tubectl +ng get pods ng%
            tubectl +ng delete po ng% --force --grace-period 0

4- Demo 

    1. Il est temps d'accèder à notre appli... 
        Service ClusterIP = uniquement dans le cluster.. port-forward ! 
    
         sudo kubefwd svc

    2. Bon... débugger... 

        - J'ouvre mon svc2 via vscode
        - J'install squash
        - command shift P 
        - squash... 
        
    3. Telepresence... Ok j'aimerai bien pouvoir changer complétement mon code à chaud... 
        (coupe kubefwd)
        k port-forward example-service1-df5fd55fd-jvdlf 8080
        telepresence --swap-deployment example-service2 --run-shell --expose 8080:8080
        